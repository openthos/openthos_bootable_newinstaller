try_mount()
{
        RW=$1; shift
        if [ "${ROOT#*:/}" != "$ROOT" ]; then
                # for NFS roots, use nolock to avoid dependency to portmapper
                RW="nolock,$RW"
        fi
        # FIXME: any way to mount ntfs gracefully?
        mount -o $RW $@ || mount -t ntfs -o rw,force $@
}

rebooting()
{
        dialog --title " Rebooting... " --nocancel --pause "" 8 41 1
        sync
        umount -a
        reboot -f
}

choose()
{
        dialog --clear --title " $1 " \
                --menu "$2" 20 71 13 --file $menufile 2> $tempfile

        retval=$?
        choice=`cat $tempfile`
}
progress_bar()
{
        dialog --clear --title " $1 " --gauge "\n $2" 8 70
}

find_all_drive()
{
        echo -n > $menufile
        for i in /sys/block/*; do
                if [ ! -d $i/device ]; then  # pathname expansion failed
                        continue
                fi
                if [ -f $i/removable -a $(cat $i/removable) -eq 0 ]; then
			echo -n $(basename $i) >> $menufile
                else
                        continue
                fi
		echo -n ' "' >> $menufile
                if [ -f $i/size ]; then
                        echo -n $(($(cat $i/size) / 2048))"MB" >> $menufile
                fi
		model_unknown=yes
		echo -n ' (' >> $menufile
		if [ -f $i/device/vendor ]; then
			echo -n $(cat $i/device/vendor) >> $menufile
			model_unknown=no
		fi
		if [ -f $i/device/model ]; then
			if [ x"$model_unknown" == x"no" ]; then
				echo -n " " >> $menufile
			fi
			echo -n $(cat $i/device/model) >> $menufile
			model_unknown=no
		fi
		if [ x"$model_unknown" == x"yes" ]; then
			echo -n "Generic Disk" >> $menufile
		fi
		echo  ')"' >> $menufile
        done
}

partition_drive()
{
        echo partition_drive ...

	find_all_drive

        count=`wc -l $menufile | awk '{ print $1 }'`
        if [ $count -eq 0 ]; then
                dialog --title " Error " --msgbox \
                        "\nOK. There is no hard drive to edit partitions." 8 49
                return 255
        fi

	choose "Choose Drive" "Please select a drive to edit partitions:"

        if [ $retval -eq 0 ]; then
                dialog --title " Confirm " --yesno "\n Do you want to use GPT?" 7 29
                if [ $? -eq 0 ]; then
                        cgdisk /dev/$choice
                else
                        cfdisk /dev/$choice
                fi
                if [ $? -eq 0 ]; then
                        retval=1
                else
                        retval=255
                fi
        fi
        return $retval
}


select_dev()
{
        echo select_dev ...

	find_all_drive

	cat $menufile > $tempfile
	for i in $(cat $tempfile | awk '{print $1}'); do
		disk=$(basename $i)
		echo -n $disk": "
		echo -n "DISK "
		echo $(($(cat /sys/block/$i/size) / 2048))"MB "
		for j in $(ls -d /sys/block/$i/$i* 2>/dev/null); do
			disk=$(basename $j)
			echo -n $disk": "
			blkid | grep "/dev/$disk" > /dev/null
			if [ $? = 0 ]; then
				type=$(blkid | grep "/dev/$disk" | sed 's/.*\ TYPE="\([a-z,0-9]*\)".*/\1/g')
			else
				type=unknown
			fi
			echo -n $type" "
			echo $(($(cat $j/size) / 2048))"MB "
		done
        done | awk '{
		sub(/:/, "", $1)
		printf("\"%-13s%-17s%-13s", $1, $2, $3)
               system("cd /sys/block; for f in "$1"/device/model "$1"/device/vendor */"$1"/../device/model */"$1"/../device/vendor; do [ -e $f ] && echo -n `cat $f` && break; done")
		printf("\" \"\"\n")
	} END {
		printf("\"Create/Modify partitions\" \"\"\n\"Detect devices\" \"\"\n")
	}' > $menufile
}

select_whole_dev()
{
        echo -n > $menufile

	find_all_drive

        count=`wc -l $menufile | awk '{ print $1 }'`
        if [ $count -eq 0 ]; then
                dialog --title " Error " --msgbox \
                        "\nOK. There is no hard drive to install OPENTHOS." 8 49
                return 255
        fi 
        choose "Choose Drive" "Please select a drive to Install OPENTHOS:"
}

select_efi_dev()
{
        select_dev
        choose "Choose Partition" "Please select a partition to install OPENTHOS EFI partition:"
        return $retval
}

select_data_dev()
{
        select_dev
        choose "Choose Partition" "Please select a partition to install OPENTHOS DATA:"
        return $retval
}

select_system_dev()
{
        select_dev
        choose "Choose Partition" "Please select a partition to install OPENTHOS System:"
        return $retval
}

format_fs()
{
        local cmd
	local device=$1
        if [ $2 = "data" ];then
                echo -e '"Do not format" ""\next4 ""' > $menufile
                /system/bin/tune2fs -l $1 | grep quota | grep -q project || cmd="/system/bin/tune2fs"
        elif [ $2 = "system" ];then
                echo -e '"Do not format" ""\next4 ""\next3 ""\next2 ""' > $menufile
        elif [ $2 = "efi" ];then
                echo -e '"Do not format" ""\nfat32 ""' > $menufile
        fi
        choose "Choose filesystem" "Please select a filesystem to format $device:"
        case "$choice" in
                ext4)
                        cmd="mke2fs -F -t ext4"
                        ;;
                ext3)
                        cmd="mke2fs -F -t ext3 -j"
                        ;;
                ext2)
                        cmd="mke2fs -F"
                        ;;
                ntfs)
                        cmd="mkntfs -F -f"
                        ;;
                fat32)
                        cmd="mkdosfs"
                        ;;
                *)
                        ;;
        esac
        if [ -n "$cmd" ]; then
                echo $cmd | grep -q tune2fs || dialog --title " Confirm "  --yesno \
                        "\n You chose to format $device to $choice.\n All data in that partition will LOSE.\n\n Are you sure to format the partition $device?" 10 51
                [ $? -ne 0 ] && return 1
                if [ $2 = "efi" ];then
                        $cmd -n EFI $device | awk '{
                                # FIXME: very imprecise progress
                                if (match($0, "done"))
                                        printf("%d\n", i+=33)
                        }' | progress_bar "Formatting" "Formatting partition $device..."
                elif [ $2 = "system" ];then
                        $cmd -L "oto_sys" $device | awk '{
                                # FIXME: very imprecise progress
                                if (match($0, "done"))
                                        printf("%d\n", i+=33)
                        }' | progress_bar "Formatting" "Formatting partition $device..."
                elif [ $2 = "data" ];then
                        $cmd -L "oto_data" -O project,quota $device | awk '{
                                # FIXME: very imprecise progress
                                if (match($0, "done"))
                                        printf("%d\n", i+=33)
                        }' | progress_bar "Formatting" "Formatting partition $device..."
                fi
        fi
}

