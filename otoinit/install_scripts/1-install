#
# By 
#  Chih-Wei Huang   <cwhuang@linux.org.tw>
#  Yu Chen          <yuchen@tsinghua.edu.cn>
#  David Chen       <chenwei01@thtfpc.com>
# Last updated 2017/08/31
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#


# mount bootable USB to /mnt/livemedia/OpenThos
# mount target partition to /hd/efi /hd/system /hd/data
CMD=""
tempfile=/tmp/temp-$$
menufile=/tmp/menu-$$
EfiMountPoint=/hd/efi
SysMountPoint=/hd/system
DataMountPoint=/hd/data
CPIO=cpio
asrc="OpenThos"
SRC="livemedia/OpenThos"
files="/mnt/$SRC/install.img /mnt/$SRC/kernel /mnt/$SRC/initrd.img /mnt/$SRC/ramdisk.img"
bootconf=$EfiMountPoint/$asrc/boto_linux.conf
source /scripts/install

create_data_img()
{
	bname=`basename $2`
	if [ -e $2 ]; then
		dialog --title " Confirm "  --yesno \
			"\n $bname exists. Overwrite it?" 7 38
		[ $? -ne 0 ] && return 255
		rm -f $2
	fi
	dialog --title " Question " --nook --nocancel --inputbox \
		"\nPlease input the size of the $bname in GB:" 8 63 $1 2> $tempfile
	size=`cat $tempfile`
	size=`expr $size \* 1024`
	dd if=/dev/zero of=$2 bs=1 count=0 seek=$size"M"
}

create_boto_data_img()
{
	dialog --title " Confirm " --yesno \
		"\nThe installer is going to create a disk image to save the user data.\ndefault space is 20G.\n\nAre you sure to create the image?" 11 62
	if [ $? -eq 0 ]; then
		avaiableLoop=`losetup -f`
		create_data_img 20 $MOUNT/openthos/data.img
		losetup $avaiableLoop $MOUNT/openthos/data.img
		make_ext4fs -L "DATA" $avaiableLoop > /dev/tty6
		[ $? -ne 0 ] && dialog --msgbox "\n Failed to create data.img" 7 33
	else
		dialog --title " Warning " --msgbox \
			"\nOK. So data will be save to a RAMDISK(tmpfs), and lose after power off." 8 49
	fi
}

boto_install_to()
{
	#format install dev and mount to /hd
	cd /
	mountpoint -q $EfiMountPoint && umount $EfiMountPoint
	local disk=`echo $1|sed 's/[0-9]*$//g'`
	local device=$1
	while [ 1 ]; do
		if [ -n "`blkid $device|grep vfat`" ];
		then
			dialog --defaultno --title " Confirm "  --yesno \
				"\n Detect $1 filesystem is FAT32,Reformat it?" 10 60
			if [ $? -eq 0 ];then
				format_fs $1 efi
			fi
		else
			format_fs $1 efi
		fi

		try_mount rw $device $EfiMountPoint && break
		dialog --clear --title " Error "  --yesno \
			"\n Cannot mount /dev/$1\n Do you want to format it?" 8 37
		[ $? -ne 0 ] && return 255
	done

	if [ ! -e $EfiMountPoint/efi/boot/bootx64.efi ];then
		cp $EfiMountPoint/efi/boot/bootx64.efi /tmp/ > /dev/null
		tar -xvf /mnt/$SRC/efi.tar.bz2 -C $EfiMountPoint > /dev/null
		rm -f $EfiMountPoint/efi/boot/bootx64.efi > /dev/null
		cp /tmp/bootx64.efi $EfiMountPoint/efi/boot/bootx64.efi > /dev/null
	else
		tar -xvf /mnt/$SRC/efi.tar.bz2 -C $EfiMountPoint > /dev/null
	fi

	UUID=`blkid $device|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	CMD="quiet androidboot.hardware=android_x86_64 BOOT_MODE=hdboot RAMDISK_HD_UUID=$UUID RAMDISK_IMG=OpenThos/ramdisk.img"
	
	mkdir -p $EfiMountPoint/$asrc
	cp $files $EfiMountPoint/$asrc/ -rf
	bootdisk=/dev/`echo "$1"|tr -d "0-9"`
	part=`echo "$1"|tr -d "a-z"`
	dialog --infobox "\n Syncing installtion efi partition to disk..." 5 50
	sync

	return $result
}
boto_install_hd()
{
	echo boto_install_hd...

	select_efi_dev || rebooting
	retval=1
	case "$choice" in
		[hmnsv][dmv]*)
			boto_install_to /dev/$choice
			retval=$?
			;;
		Create*)
			partition_drive
			retval=$?
			;;
		Detect*)
			dialog --title " Detecting... " --nocancel --pause "" 8 41 1
			;;
	esac
	return $retval
}

boto_data_install_to()
{
	local device=$1
	mkdir $DataMountPoint
	while [ 1 ]; do
		format_fs $device data
		if [ `blkid $device|awk -F "TYPE" '{print $2;}'|awk -F "\"" '{print $2;}'` = "ntfs" ];then
			mount.ntfs-3g $device $DataMountPoint && break
		else
			try_mount rw $device $DataMountPoint && break
		fi
		#try_mount rw $device $DataMountPoint && break
		dialog --clear --title " Error "  --yesno \
			"\n Cannot mount $device\n Do you want to format it?" 8 37
	done
	mkdir $DataMountPoint/vendor/app -p
	#cp /mnt/$SRC/data.img $DataMountPoint/vendor/app/
	cd $DataMountPoint/vendor/app/
	zcat /mnt/$SRC/data.img|cpio -id
	#create_boto_data_img

	UUID=`blkid $device|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	CMD="$CMD DATA_HD_UUID=$UUID"
	echo "\"OpenThos\"" \"$CMD\" > $bootconf
	echo "\"OpenThos DEBUG\"" \"$CMD DEBUG=1\" >> $bootconf
	efibootmgr -c -d $bootdisk -p $part -L OpenThos -l /efi/boto/bootx64.efi

	dialog --infobox "\n Syncing data to disk..." 5 30
	sleep 1
	sync
}
boto_install_data_hd()
{
	select_data_dev || rebooting
	retval=1
	case "$choice" in
		[hmnsv][dmv]*)
			boto_data_install_to /dev/$choice
			retval=$?
			;;
		Create*)
			partition_drive
			retval=$?
			;;
		Detect*)
			dialog --title " Detecting... " --nocancel --pause "" 8 41 1
	esac
	return $retval
}
boto_system_install_to()
{
	local device=$1
	format_fs $device system
	if [ -e /mnt/$SRC/system.sfs ]; then
		mkdir /sfs/sfs -p
		mkdir /sfs/system -p
		mount -o loop /mnt/$SRC/system.sfs /sfs/sfs
		mount -o loop /sfs/sfs/system.img /sfs/system
	fi
	mount $device $SysMountPoint
	echo "Install System File..."
	cp -af /sfs/system/* $SysMountPoint/

	UUID=`blkid $device|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	CMD="$CMD SYSTEM_HD_UUID=$UUID "
}
boto_install_system_hd()
{
	select_system_dev || rebooting
	retval=1
	case "$choice" in
		[hmnsv][dmv]*)
			boto_system_install_to /dev/$choice
			retval=$?
			;;
		Create*)
			partition_drive
			retval=$?
			;;
		Detect*)
			dialog --title " Detecting... " --nocancel --pause "" 8 41 1
	esac
	return $retval
}

pre_mount()
{
	ker_part=$1"1"
	sys_part=$1"2"
	data_part=$1"3"
	mkfs.vfat -I -n EFI $ker_part
	try_mount rw $ker_part $EfiMountPoint
	mke2fs -F -t ext4 $sys_part
	try_mount rw $sys_part $SysMountPoint
	mke2fs -F -t ext4 $data_part
	try_mount rw $data_part $DataMountPoint
}
pre_install_app()
{
	mkdir $DataMountPoint/vendor/app -p
	#cp /mnt/$SRC/data.img $DataMountPoint/vendor/app/
	cd $DataMountPoint/vendor/app/
	zcat /mnt/$SRC/data.img|cpio -id
}
hd_install_system()
{
	mkdir -p $EfiMountPoint/$asrc
	cp $files $EfiMountPoint/$asrc/ -rf

	if [ -e /mnt/$SRC/system.sfs ]; then
		mkdir /sfs/sfs -p
		mkdir /sfs/system -p
	mount -o loop /mnt/$SRC/system.sfs /sfs/sfs
		mount -o loop /sfs/sfs/system.img /sfs/system
	fi
	cp -af /sfs/system/* $SysMountPoint/

	SUUID=`blkid "$1"2|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`

	tar -xvf /mnt/$SRC/efi.tar.bz2 -C $EfiMountPoint > /dev/null

	UUID=`blkid $1"1"|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	CMD="quiet androidboot.hardware=android_x86_64 BOOT_MODE=hdboot RAMDISK_HD_UUID=$UUID RAMDISK_IMG=OpenThos/ramdisk.img SYSTEM_HD_UUID=$SUUID"
	bootdisk=$1

	sync;sync;sync
	pre_install_app
	UUID=`blkid "$1"3|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	CMD="$CMD DATA_HD_UUID=$UUID"
	echo "\"OpenThos\"" \"$CMD\" > $bootconf
	echo "\"OpenThos DEBUG\"" \"$CMD DEBUG=1\" >> $bootconf
	efibootmgr -c -d $bootdisk -p 1 -L OpenThos -l /efi/boto/bootx64.efi
	sync
}
rebuild_all_partition()
{
	local disk=$1
	dialog --infobox "\n Destroy all Partition..." 5 30
	sgdisk -g -o -Z $disk
	dialog --infobox "\n Create new GPT Partitions..." 5 45
	# We just assume that  sector size is 512B
	sgdisk -g -n 1:2048:411647 -t 1:ef00 $disk
	sgdisk -g -n 2:411648:8800255 -t 2:8300 $disk
	sgdisk -g -n 3:8800256: -t 3:8300 $disk
}
hd_install_all(){
	pre_mount $1
	hd_install_system $1
}
hd_auto_install()
{
	dialog --title "Auto Install OPENTHOS" --defaultno --yesno "will ERASE whole hard drive,Continue?" 5 45
	if [ $? -eq 0 ];then
		select_whole_dev || rebooting
		rebuild_all_partition /dev/$choice
		hd_install_all /dev/$choice
	fi
	rebooting
}
manual_install_guide(){
dialog --title "Manual Install Guide" --yes-label "Understand" --no-label "Cancel" --yesno "\
------------------------------------------------------------------------------------\n\
                     |Choose sdX1 to install bootloader&kernel|\n\
                      ----------------------------------------\n\
                                       |\n 
                         -------------------------------\n\
                         |    Format sdX1 with FAT32   |\n\
                         -------------------------------\n\
                                       |\n 
                       -----------------------------------\n\
                      |    Install bootloader&kernel      |\n\
                       -----------------------------------\n\
                                       |\n 
                         -------------------------------\n\
                         |Choose sdX2 to install System|\n\
                         -------------------------------\n\
                                       |\n 
                         -------------------------------\n\
                         |    Format sdX2 with ext4    |\n\
                         -------------------------------\n\
                                       |\n 
                         -------------------------------\n\
                         |       Install System        |\n\
                         -------------------------------\n\
                                       |\n 
                         -------------------------------\n\
                         |Choose sdX3 to install System|\n\
                         -------------------------------\n\
                                       |\n 
                         -------------------------------\n\
                         |    Format sdX3 with ext4    |\n\
                         -------------------------------\n\
                                       |\n 
                         -------------------------------\n\
                         |Install private data and app |\n\
                         -------------------------------\n\
" 30 90
	if [ $? -eq 1 ];then
		rebooting
	fi
}
hd_user_guide()
{
	dialog --title "Install OpenThos Guide" --yes-label Auto\ Install --no-label Manual\ Install --yesno "\
------------------------------------------------------------------\n\
|                          Install Method                        |\n\
------------------------------------------------------------------\n\
Auto Install:\n\
    will ERASE a whole hard disk to install OPENTHOS,you need to backup your private data\n\
    ========================================================\n\
    |\/\/\/\/\/\/\/\/\/\ hard disk is erased \/\/\/\/\/\/\/|\n\
    ========================================================\n\
\n\
\n\
Manual Install:\n\
  will need 3 partition,1st:boot&kernel file,2st:System, 3rd:private app and data\n\
      ====================================================\n\
      |  sdX1:200M | sdX2:4G |    sdX3:Remained      |...|\n\
      ====================================================\n\
            |           |              |                     \n\
       boot&kernel   System      App and data             \n\
" 25 70
	return $?
}
hd_manual_install()
{
	until boto_install_hd; do
		if [ $retval -eq 255 ]; then
			dialog --title ' Error! ' --yes-label Retry --no-label Reboot \
				--yesno '\nInstallation failed! Please check if you have enough free disk space to install OPENTHOS.' 8 51
			[ $? -eq 1 ] && rebooting
		fi
	done
	until boto_install_system_hd; do
		if [ $retval -eq 255 ]; then
			dialog --title ' Error! ' --yes-label Retry --no-label Reboot \
				--yesno '\nInstallation system failed!' 8 51
			[ $? -eq 1 ] && rebooting
		fi
	done
	until boto_install_data_hd; do
		if [ $retval -eq 255 ]; then
			dialog --title ' Error! ' --yes-label Retry --no-label Reboot \
				--yesno '\nInstallation data failed!' 8 51
			[ $? -eq 1 ] && rebooting
		fi
	done
	sum=5;while [[ sum -gt 0 ]];do echo $sum;sum=`expr $sum - 1`;dialog --title " REBOOTING OPENTHOS" --infobox "\n        $sum" 7 30 ;sleep 1; done
	rebooting
}
hd_prepare_install(){
	if [ ! -d $EfiMountPoint ];then
		mkdir $EfiMountPoint $SysMountPoint $DataMountPoint
	fi
}
hd_install()
{
	hd_prepare_install
	hd_user_guide
	if [ $? -eq 1 ];then
		hd_manual_install
		sum=5;while [[ sum -gt 0 ]];do echo $sum;sum=`expr $sum - 1`;dialog --title " REBOOTING OPENTHOS" --infobox "\n        $sum" 7 30 ;sleep 1; done
	else 
		hd_auto_install
	fi
	rebooting
}
